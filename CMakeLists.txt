cmake_minimum_required(VERSION 3.0.0)
project(smoke VERSION 0.1.0)

include(CTest)
enable_testing()
add_test(NAME variables COMMAND python ../test_runner.py "smoke.exe" "../tst/variable.sm" "//expect:")
add_test(NAME scope COMMAND python ../test_runner.py "smoke.exe" "../tst/scope.sm" "//expect:")
add_test(NAME if COMMAND python ../test_runner.py "smoke.exe" "../tst/if.sm" "//expect:")
add_test(NAME while COMMAND python ../test_runner.py "smoke.exe" "../tst/while.sm" "//expect:")
add_test(NAME loop COMMAND python ../test_runner.py "smoke.exe" "../tst/loop.sm" "//expect:")
add_test(NAME functions COMMAND python ../test_runner.py "smoke.exe" "../tst/functions.sm" "//expect:")
add_test(NAME closures COMMAND python ../test_runner.py "smoke.exe" "../tst/closures.sm" "//expect:")
add_test(NAME strings COMMAND python ../test_runner.py "smoke.exe" "../tst/strings.sm" "//expect:")
add_test(NAME lists COMMAND python ../test_runner.py "smoke.exe" "../tst/listadd.sm" "//expect:")
add_test(NAME listadd COMMAND python ../test_runner.py "smoke.exe" "../tst/lists.sm" "//expect:")
add_test(NAME boundscheck COMMAND python ../test_runner.py "smoke.exe" "../tst/boundscheck.sm" "//expect:" -e)
add_test(NAME slice COMMAND python ../test_runner.py "smoke.exe" "../tst/slice.sm" "//expect:")
add_test(NAME for COMMAND python ../test_runner.py "smoke.exe" "../tst/for.sm" "//expect:")
add_test(NAME range COMMAND python ../test_runner.py "smoke.exe" "../tst/range.sm" "//expect:")
add_test(NAME subscript COMMAND python ../test_runner.py "smoke.exe" "../tst/subscript.sm" "//expect:")
add_test(NAME split COMMAND python ../test_runner.py "smoke.exe" "../tst/split.sm" "//expect:")
add_test(NAME interpolation COMMAND python ../test_runner.py "smoke.exe" "../tst/interpolation.sm" "//expect:")
add_test(NAME inc COMMAND python ../test_runner.py "smoke.exe" "../tst/increment.sm" "//expect:")
add_test(NAME decrement COMMAND python ../test_runner.py "smoke.exe" "../tst/decrement.sm" "//expect:")
add_test(NAME include COMMAND python ../test_runner.py "smoke.exe" "../tst/inc.sm" "//expect:")
add_test(NAME class COMMAND python ../test_runner.py "smoke.exe" "../tst/class.sm" "//expect:")
add_test(NAME dates COMMAND python ../test_runner.py "smoke.exe" "../tst/dates.sm" "//expect:")
add_test(NAME native COMMAND python ../test_runner.py "smoke.exe" "../tst/native.sm" "//expect:")
add_test(NAME anon COMMAND python ../test_runner.py "smoke.exe" "../tst/anon.sm" "//expect:")
add_test(NAME binary COMMAND python ../test_runner.py "smoke.exe" "../tst/binary.sm" "//expect:")
add_test(NAME where COMMAND python ../test_runner.py "smoke.exe" "../tst/where.sm" "//expect:")
add_test(NAME format COMMAND python ../test_runner.py "smoke.exe" "../tst/format.sm" "//expect:")
add_test(NAME assignment COMMAND python ../test_runner.py "smoke.exe" "../tst/assignment.sm" "//expect:")
add_test(NAME pop COMMAND python ../test_runner.py "smoke.exe" "../tst/pop.sm" "//expect:")
add_test(NAME comparison COMMAND python ../test_runner.py "smoke.exe" "../tst/comparison.sm" "//expect:")
add_test(NAME enum COMMAND python ../test_runner.py "smoke.exe" "../tst/enum.sm" "//expect:")
add_test(NAME shovel COMMAND python ../test_runner.py "smoke.exe" "../tst/shovel.sm" "//expect:")
add_test(NAME shovel_method COMMAND python ../test_runner.py "smoke.exe" "../tst/shovel_method.sm" "//expect:")
add_test(NAME set COMMAND python ../test_runner.py "smoke.exe" "../tst/set.sm" "//expect:")
add_test(NAME module COMMAND python ../test_runner.py "smoke.exe" "../tst/module.sm" "//expect:")
add_test(NAME nil COMMAND python ../test_runner.py "smoke.exe" "../tst/nil.sm" "//expect:")
add_test(NAME sort COMMAND python ../test_runner.py "smoke.exe" "../tst/sort.sm" "//expect:")
add_test(NAME pluesequals COMMAND python ../test_runner.py "smoke.exe" "../tst/plusequals.sm" "//expect:")
add_test(NAME pluesequalsstr COMMAND python ../test_runner.py "smoke.exe" "../tst/plusequalsstr.sm" "//expect:")
add_test(NAME pluesequalslist COMMAND python ../test_runner.py "smoke.exe" "../tst/plusequalslist.sm" "//expect:")
add_test(NAME optionalparams COMMAND python ../test_runner.py "smoke.exe" "../tst/optionalparams.sm" "//expect:")
add_test(NAME minusequals COMMAND python ../test_runner.py "smoke.exe" "../tst/minusequals.sm" "//expect:")
add_test(NAME hashtable COMMAND python ../test_runner.py "smoke.exe" "../tst/hashtable.sm" "//expect:")
add_test(NAME escapechar COMMAND python ../test_runner.py "smoke.exe" "../tst/escapechar.sm" "//expect:")
add_test(NAME jsonparse COMMAND python ../test_runner.py "smoke.exe" "../tst/jsonparse/jsonparse.sm" "//expect:")
add_test(NAME rawstring COMMAND python ../test_runner.py "smoke.exe" "../tst/rawstring.sm" "//expect:")
add_test(NAME sql COMMAND python ../test_runner.py "smoke.exe" "../tst/sql.sm" "//expect:")

add_test(NAME inc_string COMMAND python ../test_runner.py "smoke.exe" "../tst/error/inc_string.sm" "//expect:")
add_test(NAME dec_string COMMAND python ../test_runner.py "smoke.exe" "../tst/error/dec_string.sm" "//expect:")
add_test(NAME const_global COMMAND python ../test_runner.py "smoke.exe" "../tst/error/const_global.sm" "//expect:")
add_test(NAME const_local COMMAND python ../test_runner.py "smoke.exe" "../tst/error/const_local.sm" "//expect:")
add_test(NAME var_global COMMAND python ../test_runner.py "smoke.exe" "../tst/error/var_global.sm" "//expect:")
add_test(NAME shovel_not_a_list COMMAND python ../test_runner.py "smoke.exe" "../tst/error/shovel_not_a_list.sm" "//expect:")
add_test(NAME plus_equal_invalid_types COMMAND python ../test_runner.py "smoke.exe" "../tst/error/plus_equal_invalid_types.sm" "//expect:")


add_executable(smoke src/main.c src/chunk.c src/memory.c src/debug.c src/value.c src/vm.c src/compiler.c src/scanner.c src/object.c src/table.c src/native/console.c src/native/list.c src/native/filesys.c src/native/fileio.c src/native/stringutil.c src/native/date.c src/native/conio.c src/format.c src/native/mathmod.c src/quicksort.c src/native/jsonparse.c src/sqlite3/sqlite3.c src/sqlite3/sqlNative.c)
#target_link_options(smoke PRIVATE -lm -lreadline)
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
