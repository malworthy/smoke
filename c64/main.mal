#inc scanner.mal
#inc compiler.mal
#inc vm.mal

const directVM = Vm(Chunk())

fn runProgram(program, debug, runDirect) 
{
    const scanner = Scanner(program)
    const tokens = scanner.scanTokens()
    // print tokens
    if debug then 
    {
        print ""
        print "--- TOKENS ---"
        for t in tokens
            print t.toString()
    }
    const compiler = Compiler(tokens)
    const chunk = compiler.compile()

    if compiler.hasError then return

    if debug then
    {
        print ""
        print "--- BYTECODE ---"
        for ins in chunk.instructions
            print ins.toString()

        print ""
        print "--- PROGRAM OUTPUT ---"
    }
    if runDirect 
    {
        directVM.runDirect(chunk)
        if directVM.loadedProgram != nil
        {
            return directVM.loadedProgram
        }
    }
    else
    {
        const vm = Vm(chunk)
        vm.run(debug)
    }
}

fn list(program)
{
    for line in program print string.trim(line)
}

fn addToProgram(program, line)
{
    const lineNumber = num(line)
    if lineNumber > 65535 
    {
        print "LINE NUMBER TOO LARGE"
        return
    }
    
    const padding = "     "[-(5-len("%{lineNumber}")):0]
    line = padding + line

    if len(program) > 0 
    {
        for i in [0..len(program)-1]
        {
            if num(line) == num(program[i])
            {
                program[i] = line
                return
            }
        }
    }
    
    program << line
    sort(program)
}

fn repl()
{
    clear()
    print "COMMODORE 64 BASIC V2 (c) Retro Software 2022"
    print "Version 0.01"
    print ""
    print "READY."
    var program = []
    while true do
    {
        const line = input()
        //print "Line: %{line}"
        if line != "" and line[0] >= "0" and line[0] <= "9" then
        {
            addToProgram(program, line)
        }
        else if line == "run" then
        {
            //print "in run"
            runProgram(program, false, false)
            print "READY."
        }
        else if line == "debug" then
        {
            //print "in debug"
            runProgram(program, true, false)
            print "READY."
        }
        else if line == "list" then
        {
            //print "in debug"
            list(program)
        }
        else if line != ""
        {
            const result = runProgram([line], false, true)
            if result != nil
            {
                program = result
                directVM.loadedProgram = nil
            }
            print "READY."
        }
    }
}

repl()
