class NativeFunction
{
    init(name, function)
    {
        me.name = name
        me.function = function
        me.type = "native"
    }
}

class ReturnItem
{
    init(loopVariable, stepSize, to, ip)
    {
        me.loopVariable = loopVariable
        me.stepSize = stepSize
        me.to = to
        me.ip = ip
    }

    isReturn() => me.loopVariable == "return"
}

class Array
{
    init(dimensions, isString)
    {
        me.dimensions = dimensions
        me.type = "array"
        var total = me.sum(dimensions)
        me.items = [0..total] select x => me.iif(isString, "", 0)       
    }

    iif(condtion, trueValue, falseValue)
    {
        if condtion then return trueValue
        return falseValue
    }

    sum(list)
    {
        var total = 1
        list select x => total = total * (x + 1)
        return total
    }

    getIndex(indexes)
    {
        var index = 0
        if len(me.dimensions) > 1
        {
            for i in [0..len(me.dimensions)-2]
                index = index + indexes[i] * me.dimensions[1:0]
        }
        return index + indexes[-1]
    }

    get(indexes)
    {
        // todo: check for out of bounds
        const index = me.getIndex(indexes)
        //print "index is: %{index}"
        if index >= len(me.items) then return [false]

        return [true, me.items[index]]
    }

    set(indexes, value)
    {
        me.items[me.getIndex(indexes)] = value
    }
}

class Vm
{
    init(chunk)
    {
        me.loadedProgram = nil
        me.placeName = ""
        me.instr = chunk.instructions
        me.chunk = chunk
        me.ip = 0
        me.memory = [0..65535] select x => 0
        me.stack = []
        me.filePointers = []
        me.variables = []
        me.arrays = []
        me.functions = [
            NativeFunction("abs", me.absNative), 
            NativeFunction("asc",me.ascNative),
            NativeFunction("atn",me.atnNative),
            NativeFunction("chr$", fn(params) {
                const num = params[0]
                if type(num) != Type.Number 
                {
                    me.runtimeError("?TYPE MISMATCH")
                    return [false]
                }
                return [true, string.char(num)] 
            }),
            NativeFunction("cos", me.cosNative),
            NativeFunction("exp", me.expNative),
            NativeFunction("fre", fn(dummy) => [true,65535]),
            NativeFunction("int", fn(params) => me.mathFn(params[0], me.floor)),
            NativeFunction("left$", me.leftNative),
            NativeFunction("log", fn(params) => me.mathFn(params[0], me.log)),  
            NativeFunction("mid$", me.midNative),
            NativeFunction("right$", me.rightNative),
            NativeFunction("len", me.lenNative),
            NativeFunction("sgn", me.sgnNative),
            NativeFunction("peek", me.peekNative)
            ]
        
        var i = 0
        while i++ <= me.getVariableIndex("Z9\%") 
        { 
            me.variables << 0
            me.arrays << nil
        }
        
        while i++ <= me.getVariableIndex("Z9$") 
        {
            me.variables << ""
            me.arrays << nil
        }

        for x in [0..255]
            me.filePointers << 0
        
        me.defaultMemory()

    }

    floor(num) => math.floor(num)   
    log(num) => math.log(num)

    peekNative(params)
    {
        if type(params[0]) != Type.Number
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }
        const index = params[0]
        if index < 0 or index > 65535 
        {
            me.runtimeError("?ILLEGAL QUANTITY ERROR")
            return [false]
        }
        return [true, me.memory[index]]
    }

    sgnNative(params)
    {
        if type(params[0]) != Type.Number
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }
        var result = 0
        if params[0] < 0 then result = -1
        if params[0] > 0 then result = 1
        return [true, result]
    }

    lenNative(params)
    {
        if type(params[0]) != Type.String
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }
        return [true, len(params[0])]
    } 

    midNative(params)
    {
        if len(params) < 2 or len(params) > 3 
        {
            me.runtimeError("?SYNTAX ERROR")
            return [false]
        }
        if type(params[0]) != Type.String or type(params[1]) != Type.Number 
            or (len(params) == 3 and type(params[2]) != Type.Number)
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }

        var str = params[0]
        var start = params[1] - 1
        var end = 0
        if len(params) == 3 then end = start + params[2]

        if start < 0 or (end < start and len(params) == 3) 
        {
             me.runtimeError("?ILLEGAL QUANTITY ERROR")
            return [false]
        }

        if start >= len(str) then return [true, ""]

        return [true, str[start:end]]
    }

    leftNative(params)
    {
        if len(params) != 2 
        {
            me.runtimeError("?SYNTAX ERROR")
            return [false]
        }

        if type(params[0]) != Type.String
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }

        if type(params[1]) != Type.Number
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }

        const str = params[0]
        const length = params[1]
        if length <=0 then return [true, ""]
        if len(str) < length then return [true, str]
        return [true, str[0:length]]
    }

    rightNative(params)
    {
        if len(params) != 2 
        {
            me.runtimeError("?SYNTAX ERROR")
            return [false]
        }

        if type(params[0]) != Type.String
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }

        if type(params[1]) != Type.Number
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return [false]
        }

        const str = params[0]
        const length = params[1]
        if length <=0 then return [true, ""]
        if len(str) < length then return [true, str]
        return [true, str[-length:0]]
    }

    mathFn(num, func)
    {
        if type(num) != Type.Number then
        {
            me.runtimeError("?TYPE MISMATCH")
            return [false]
        }
        return [true, func(num)]
    }

    atnNative(params)
    {
        const num = params[0]
        if type(num) != Type.Number then
        {
            me.runtimeError("?TYPE MISMATCH")
            return [false]
        }
        return [true, math.atan(num)] 
    }

    cosNative(params)
    {
        const num = params[0]
        if type(num) != Type.Number then
        {
            me.runtimeError("?TYPE MISMATCH")
            return [false]
        }
        return [true, math.cos(num)] 
    }

    expNative(params)
    {
        const num = params[0]
        if type(num) != Type.Number then
        {
            me.runtimeError("?TYPE MISMATCH")
            return [false]
        }
        return [true, math.exp(num)] 
    }

    absNative(params)
    {
        const num = params[0]
        if type(num) != Type.Number then
        {
            me.runtimeError("?TYPE MISMATCH")
            return [false]
        }
        if num >= 0 then return [true, num] else return [true, -num]
    }

    ascNative(params)
    {
        const s = params[0]
        if type(s) != Type.String then
        {
            me.runtimeError("?TYPE MISMATCH")
            return [false]
        }
        if s == "" then
        {
            me.runtimeError("?ILLEGAL QUANTITY ERROR")
            return [false]
        }
        return [true, string.ascii(s)]
    }

    charToIndex(c)
    {
        if c >= "A" and c <= "Z" then 
            return string.ascii(c) - 65
        if c >= "0" and c <= "9" then
            return string.ascii("Z") + 1 + num(c)

        return 0
    }

    getVariableIndex(name)
    {
        var vartype = 0

        if name[-1] == "\%" 
        {
            vartype = 1
            name = name[0:-1]
        }
        if name[-1] == "$" 
        {
            vartype = 2
            name = name[0:-1]
        }         
        var byte1 = 0
        var byte2 = 0

        name = string.upper(name)

        if len(name) == 1 then 
        {
            byte1 = 0
            byte2 = me.charToIndex(name[0])
        }
        else
        {
            byte1 = me.charToIndex(name[0]) + 1
            byte2 = me.charToIndex(name[1])
        }

        return vartype * (37 * 37) + byte1 * 37 + byte2       
    }

    getVariable(name)
    {
        // system variables
        if len(name) >= 2 and string.upper(name[0:2]) == "TI"
        {
            if name[-1] == "$" then
                me.stack << "%{date.now()|HH:MM:ss}"
            else
                me.stack << clock()
            return true
        }


        const func = me.functions where x => string.upper(x.name) == string.upper(name)
        if len(func) == 1 then 
        { 
            me.stack << func[0]
            return true
        }

        if me.placeName != "" and string.upper(me.placeName) == string.upper(name) 
        {
            me.stack << me.placeValue
            return true
        }

        const index = me.getVariableIndex(name)

        me.stack << me.variables[index]
        return true
    }

    getCallable(name)
    {
        const func = me.functions where x => string.upper(x.name) == string.upper(name)
        //print func
        if len(func) == 1 then 
        { 
            me.stack << func[0]
            return true
        }
        //print "line 235"
        const index = me.getVariableIndex(name)
        //print "index %{index} %{me.arrays}"
        //print me.arrays[0]
        me.stack << me.arrays[index]
        //print "stack %{me.stack}"
        return true
    }

    runtimeError(message)
    {
        const line = me.instr[me.ip].line_number
        if line > 0 then message = message + " IN LINE %{line}"
        me.error = message
        print message
    }

    gotoLine(number)
    {
        var startip = 0
        if number > me.instr[me.ip].line_number and me.ip < len(me.instr)-1 then startip = me.ip + 1
        //print "len chunk: %{len(me.instr)}"
        for i in [startip..len(me.instr)-1]
        {
            //print "i: %{i}"
            if me.instr[i].line_number == number then
            {
                me.ip = i
                return true
            }
        }
        me.runtimeError("?UNDEF'D STATEMENT ERROR")
        return false
    }

    jumpLine()
    {
        //print "*** IN JUMP LINE ***"
        const current = me.instr[me.ip].line_number
        var line = current
        var p = me.ip
        while line == current and p < len(me.instr)  do
        {
            p++
            if p >= len(me.instr) then return false
            line = me.instr[p].line_number  
            //print "jump line: %{line} curr: %{current} p: %{p}"
        }
        //if p >= len(me.instr) then return false
        me.ip = p 

        return true
    }

    inputHash()
    {
        var quote = false
        var notSep = fn(c) => c != nil and c != "," and c != ";" and c != ":" and c != "\n" and c != "\r" 
        var result = ""
        const fp = me.filePointers[me.stack[-1]]
        var char = file.readchar(fp)

        if char == "\"" //"
        {
            quote = !quote
            char = file.readchar(fp)
        }    
        while (quote or notSep(char)) and char != nil  
        {
            //print "char is %{char}"
            result = result + char
            char = file.readchar(fp)
            if char == "\"" //"
            {
                quote = !quote
                char = file.readchar(fp)
            } 
        }
        if notSep(char) then result = result + char

        if char == nil and result == "" then result = string.char(199)
  
        me.stack << result
    }

    runFunction(enclosing, placeName, placeValue)
    {
        me.variables = enclosing.variables
        me.functions = enclosing.functions
        me.placeName = placeName
        me.placeValue = placeValue
        const result = me.run(false) 
        if result then enclosing.stack << me.stack[-1]

        return result
    }

    runDirect(chunk)
    {
        me.placeName = ""
        me.instr = chunk.instructions
        me.chunk = chunk
        me.ip = 0
        me.run(false)
    }

    c64Bool(bool)
    {
        if bool then return -1 else return 0
    }

    binary(operator)
    {
        const b = me.stack[>>]
        const a = me.stack[>>]
        if type(a) != type(b)
        {
            me.runtimeError("?TYPE MISMATCH ERROR")
            return false
        }
        if operator == "+" then me.stack << (a + b)
        if operator == "-" then me.stack << (a - b)
        if operator == "/" then me.stack << (a / b)
        if operator == "*" then me.stack << (a * b)

        return true
    }

    poke()
    {
        const value = me.stack[>>]
        const address = me.stack[>>]
        if value < 0 or value > 255 or address < 0 or address > 65536
        {
            me.runtimeError("?ILLEGAL QUANTITY ERROR")
            return false
        }
        me.memory[address] = value

        me.processMemory()
    }

    defaultMemory()
    {
        me.memory[53281] = 0
        me.memory[646] = 1
    }

    processMemory()
    {
        const colours = ["black","gray","red","cyan","magenta","green","blue","yellow"]
        const back = me.memory[53281] % 8
        const text = me.memory[646] % 8
        textcolor(colours[text])
        backcolor(colours[back])
    }

    run(debug)
    {
        while true do
        {
            var instr = me.instr[me.ip++]
            if debug then print "%{instr.toString()}"
            if instr.op == OpCode.OpReturn then
            {
                //print me.stack[>>]
                return true
            }
            else if instr.op == OpCode.OpConstant then
            {
                me.stack << instr.operand
            }
            else if instr.op == OpCode.OpNegate then
            {
                me.stack << -me.stack[>>]
            }
            else if instr.op == OpCode.OpAdd then
            {
                if !me.binary("+") then return false
                //const b = me.stack[>>]
                //const a = me.stack[>>]
                //me.stack << (a + b)
            }
            else if instr.op == OpCode.OpSubtract then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << (a - b)
            }
            else if instr.op == OpCode.OpMultiply then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << (a * b)
            }
            else if instr.op == OpCode.OpDivide then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << (a / b)
            }
            else if instr.op == OpCode.OpAnd then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                if type(a) == Type.String or type(b) == Type.String then
                {
                    me.runtimeError("?TYPE MISMATCH ERROR")
                    return false
                }
                me.stack << math.bitand(a, b)
            }
            else if instr.op == OpCode.OpOr then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                if type(a) == Type.String or type(b) == Type.String then
                {
                    me.runtimeError("?TYPE MISMATCH ERROR")
                    return false
                }
                me.stack << math.bitor(a, b)
            }
            else if instr.op == OpCode.OpOpen then
            {
                const filename = me.stack[>>]
                const index = me.stack[>>]
                const parts = string.split(filename, ",")
                var mode = "r"
                if len(parts) > 1 then mode = parts[1]
                //print "filename %{filename[0]} mode %{mode}"
                const fp = file.open(parts[0],mode)
                if fp == nil
                {
                    me.runtimeError("?CANNOT OPEN FILE")
                    return false
                }
                me.filePointers[index] = fp
            }
            else if instr.op == OpCode.OpPrintHash then
            {
                const text = me.stack[>>]
                const fp = me.filePointers[me.stack[>>]]
                file.write(fp, "%{text}")
                file.write(fp, "%{instr.operand}")
            }
            else if instr.op == OpCode.OpClose then
            {
                const index = me.stack[>>]
                file.close(me.filePointers[index])
            }
            else if instr.op == OpCode.OpPrint then
            {
                write("%{me.stack[>>]}")
                write("%{instr.operand}")
            }
            else if instr.op == OpCode.OpPop then
            {
                me.stack[>>]
            }
            else if instr.op == OpCode.OpGetVariable then
            {
                me.getVariable(instr.operand)
            }
            else if instr.op == OpCode.OpGetCallable then
            {
                //print "line 394"
                me.getCallable(instr.operand)
            }
            else if instr.op == OpCode.OpSetVariable then
            {
                const index = me.getVariableIndex(instr.operand)
                var value = me.stack[-1]
                if instr.operand[-1] != "$"
                {
                    //make number
                    if type(value) == Type.String then value = num(value)
                    if instr.operand[-1] == "\%" then value = math.floor(value)
                }
                me.variables[index] = value
            }
            else if instr.op == OpCode.OpSetArray then
            {
                const value = me.stack[>>]
                const indexes = me.stack[-instr.operand:0]
                for i in [1..instr.operand] me.stack[>>]
                const arr = me.stack[-1]
                if arr == nil
                {
                    me.runtimeError("?ERROR - I'M NOT CREATING AN ARRAY OF 10 ELEMENTS LIKE THE C64 DID.")
                    return false
                }
                arr.set(indexes, value)
            }
            else if instr.op == OpCode.OpGoto then
            {
                if !me.gotoLine(instr.operand) then return false
            }
            else if instr.op == OpCode.OpOnGoto then
            {
                var index = me.stack[>>]
                if type(index) == Type.String then index = num(index)
                if type(index) != Type.Number 
                {
                    //print "type of index %{Type.name(type(index))}"
                    me.runtimeError("?TYPE MISMATCH ERROR")
                    return false
                }
                if index > 0 and index <= len(instr.operand)  
                {
                    if !me.gotoLine(instr.operand[index-1]) then return false
                }
            }
            else if instr.op == OpCode.OpOnGosub then
            {
                var index = me.stack[>>]
                if type(index) == Type.String then index = num(index)
                if type(index) != Type.Number 
                {
                    //print "type of index %{Type.name(type(index))}"
                    me.runtimeError("?TYPE MISMATCH ERROR")
                    return false
                }
                //print "in onGosub: %{index}"
                if index > 0 and index <= len(instr.operand)  
                {
                    //print "pushing return item"
                    me.stack << ReturnItem("return", 0, 0, me.ip )
                    if !me.gotoLine(instr.operand[index-1]) then return false
                }
            }
            else if instr.op == OpCode.OpGosub then
                me.stack << ReturnItem("return", 0, 0, (me.ip + 1))
            else if instr.op == OpCode.OpReturnSub then
            {
                if len(me.stack) == 0 then
                {
                    me.runtimeError("?RETURN WITHOUT GOSUB ERROR")
                    return false
                }
                const item = me.stack[>>]
                me.ip = item.ip
            }
            else if instr.op == OpCode.OpFor then
            {
                const step = me.stack[>>]
                const to = me.stack[>>]
                me.stack << ReturnItem(instr.operand, step, to, me.ip)
            }
            else if instr.op == OpCode.OpNext then
            {
                if len(me.stack) == 0 then
                {
                    me.runtimeError("?NEXT WITHOUT FOR ERROR")
                    return false
                }
                while !me.stack[-1].isReturn() and me.stack[-1].loopVariable != instr.operand and instr.operand != "" do
                {
                    me.stack[>>]
                    if len(me.stack) == 0 then
                    {
                        me.runtimeError("?NEXT WITHOUT FOR ERROR")
                        return false
                    }
                }
                const item = me.stack[-1]
                const index = me.getVariableIndex(item.loopVariable)
                var value = me.variables[index]
                value = value + item.stepSize
                if value <= item.to then
                {
                    me.variables[index] = value
                    me.ip = item.ip
                }
                
            }
            else if instr.op == OpCode.OpCallFn then
            {
                const func = me.functions where x => x.name == instr.operand
                //print "Function is: %{func}"
                if len(func) != 1
                {
                    me.runtimeError("?UNDEFINED FUNCTION")
                    return false
                }
                //print "function code: %{func[0].chunk}"
                const chunk = Chunk()
                chunk.instructions = func[0].chunk
                const funcVm = Vm(chunk)
                funcVm.runFunction(me, func[0].placeholder, me.stack[>>])
                //print "function '%{func[0].name}' gets called"
            }
            else if instr.op == OpCode.OpCall then
            {
                var func = me.stack[-(instr.operand + 1)]
                if func == nil
                {
                    me.runtimeError("?SYNTAX ERROR")
                    return false
                }
                if func.type == "native"
                {
                    var params = me.stack[-instr.operand:0]
                    for i in [0..instr.operand] me.stack[>>]
                    const result = func.function(params)
                    if !result[0] then return false

                    me.stack << result[1]
                }
                else if func.type == "array"
                {
                    var indexes = me.stack[-instr.operand:0]
                    for i in [0..instr.operand] me.stack[>>]
                    const result = func.get(indexes)
                    if !result[0] then 
                    {
                        me.runtimeError("?SUBSCRIPT OUT OF RANGE")
                        return false
                    }

                    me.stack << result[1]
                }
                else
                {
                    me.runtimeError("?SYNTAX ERROR")
                    return false
                }
            }
            else if instr.op == OpCode.OpArray then
            {
                const dimcount = instr.operand[1]
                const name = instr.operand[0]
                const dims = []
                for i in [dimcount..1]
                    dims << me.stack[-i]
                for i in [1..dimcount] 
                    me.stack[>>]
                const a = Array(dims, name[-1] == "$")
                me.arrays[me.getVariableIndex(name)] = a
            }
            else if instr.op == OpCode.OpDefFn then
            {
                me.functions << instr.operand
            }
            else if instr.op == OpCode.OpEqual then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << me.c64Bool(a == b)
            }
            else if instr.op == OpCode.OpGreater then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << me.c64Bool(a > b)
            }
            else if instr.op == OpCode.OpNotEqual then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << me.c64Bool(a != b)
            }
            else if instr.op == OpCode.OpGreaterEqual then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << me.c64Bool(a >= b)
            }
            else if instr.op == OpCode.OpLess then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << me.c64Bool(a < b)
            }
            else if instr.op == OpCode.OpLessEqual then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                me.stack << me.c64Bool(a <= b)
            }
            else if instr.op == OpCode.OpNot then
            {
                me.stack[-1] = me.c64Bool(!me.stack[-1])
            }
            else if instr.op == OpCode.OpConcat then
            {
                const b = me.stack[>>]
                const a = me.stack[>>]
                if instr.operand then
                    me.stack << "%{a}\t%{b}"
                else
                    me.stack << "%{a}%{b}"
            }
            else if instr.op == OpCode.OpJumpIfFalse then
            {
                //print "top of stack: %{me.stack[-1]}"
                const condition = me.stack[>>]
                //if !me.stack[-1] then 
                if !condition
                {
                    if !me.jumpLine() then
                        return true // no more code so just end program
                }
            }
            else if instr.op == OpCode.OpInput then
            {
                write("?")
                if instr.operand then write("?")
                write(" ")
                const val = input()
                me.stack << val
            }
            else if instr.op == OpCode.OpRead then
            {
                if me.chunk.canRead() then
                    me.stack << me.chunk.readData()
            }
            else if instr.op == OpCode.OpGet then
            {
                const key = getch()
                var char = ""
                if key > 0 then char = string.char(key)
                me.stack << char
            }
            else if instr.op == OpCode.OpGetHash then
            {
                const fp = me.filePointers[me.stack[-1]]
                var char = file.readchar(fp)
                if !char then char = string.char(199)
                
                me.stack << char
            }
            else if instr.op == OpCode.OpInputHash then
            {
                me.inputHash()
            }
            else if instr.op == OpCode.OpLoad then
            {
                const filename = me.stack[>>]
                me.loadedProgram = file.readlines(filename)
            }
            else if instr.op == OpCode.OpPoke then
            {
                if !me.poke() then return false
            }
            else if instr.op == OpCode.OpNone then
            {
                // do nothing
            }
            if debug then print me.stack
        }
    }

}
